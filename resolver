#!/usr/bin/python

import re
import argparse
from tree2 import Tree, get_index
from tree3 import process_string
from algorithm_cls import resolve_anaphor
import json

gold_data = {}
lexicon = {}
head_settings = {}

def compute_corenlp_accuracy():
    pass

def read_gold_data(filename):
    corefs = {}
    with open(filename) as f:
        pass

def look_for_PRP(cell):
    if cell is None:
        return []
    unresolved = []
    if cell.tag().startswith('PRP'):
        unresolved.append(cell)
    if cell.is_leaf():
        return unresolved
    return unresolved + look_for_PRP(cell.get_left()) + look_for_PRP(cell.get_right())

def main(args):
    global lexicon
    with open(args.config_file) as c:
        params = json.load(c)
    lexicon = params[args.language]['lexicon']
    Tree.lexicon = lexicon

    with open(args.sentences) as s:
        parser_output = json.load(s)

    for sentence in sorted(parser_output["sentences"], key=lambda x: x["index"]):
        list_hier = process_string(sentence["parse"])
        tree_to_parse = Tree(list_hier[0], 0)
        print tree_to_parse.get_string()
        tree_to_parse.pretty_print()
        for candidate in filter(lambda x: x.config(), Tree.NP_nodes):
            print "Candidate:", candidate.get_string()
            print candidate.leaf_range()

            print "Results:"
            proposed = resolve_anaphor(candidate, Tree.NP_nodes)
            for proposal in proposed:
                print proposal.leaf_range(), proposal.get_string()
                
        print '-'*20
        Tree.PR_nodes.clear()
        Tree.NP_nodes.clear()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-s",
                        "--sentences",
                        default="binding_dataset.deterministic.json",
                        help="CoreNLP output containing sentences")

    parser.add_argument("-g",
                        "--gold_data",
                        default="gold_data.json",
                        help="Gold data for binding using CoreNLP indexing scheme")

    parser.add_argument("-l",
                       "--language",
                        default="eng",
                        help="Specify 'eng' for English, 'ger' for German")

    parser.add_argument("-c",
                        "--config_file",
                        default="config.json",
                        help="json input for parameter settings. Should not need anything other than the default!")


    parser.add_argument("-o",
                        "--output_file",
                        default="output_tuple.json")

    args = parser.parse_args()
    main(args)
